name: OBS Commit
# OBS_PROJECT_PATH example:
# home:user:project/sub-project *sub-project is optional

on:
  workflow_run:
    workflows: ['Update checksums']
    types:
      - completed

#  workflow_dispatch

jobs:
  copy-and-commit:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      skip: false

    steps:

    - name: Determine whether to skip obs update
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: skip-obs-update
        run-id: ${{ github.event.workflow_run.id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path: ./

    - name: Set skip environment variable
      run: |
        if [[ -f skip-obs-update.txt ]]; then
          echo "skip=true" >> $GITHUB_ENV
        fi

    - name: Checkout repository
      if: ${{ env.skip != 'true' }}
      uses: actions/checkout@v4


    - name: Install dependencies
      if: ${{ env.skip != 'true' }}
      run: |
        pip install --break-system-packages osc==1.19.0
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> $GITHUB_ENV

    - name: Configure osc
      if: ${{ env.skip != 'true' }}
      run: |
        mkdir -p ~/.config/osc
        echo "[general]" > ~/.config/osc/oscrc
        echo "apiurl = https://api.opensuse.org" >> ~/.config/osc/oscrc
        echo "[https://api.opensuse.org]" >> ~/.config/osc/oscrc
        echo "user = ${{ secrets.OBS_USERNAME }}" >> ~/.config/osc/oscrc
        echo "pass = ${{ secrets.OBS_PASSWORD }}" >> ~/.config/osc/oscrc

    - name: Checkout OBS project
      if: ${{ env.skip != 'true' }}
      run: |
        timeout 5m osc checkout ${{ secrets.OBS_PROJECT_PATH }}

    - name: Extract PKGBUILD Version
      if: ${{ env.skip != 'true' }}
      id: extract_pkgver
      run: |
        PKGBUILD_PATH="processed/PKGBUILD"
        _major=$(grep -Po '^_major=\K.*' $PKGBUILD_PATH)
        _minor=$(grep -Po '^_minor=\K.*' $PKGBUILD_PATH)
        PKGVER="${_major}.${_minor}"
        echo "Package version extracted from PKGBUILD: $PKGVER"
        echo "pkgver=$PKGVER" >> $GITHUB_OUTPUT

    - name: Copy PKGBUILD file to OBS project
      if: ${{ env.skip != 'true' }}
      run: |
        cp processed/PKGBUILD ${{ secrets.OBS_PROJECT_PATH }}
        cd ${{ secrets.OBS_PROJECT_PATH }}
        osc add PKGBUILD
        osc commit -m "Update to: ${{ steps.extract_pkgver.outputs.pkgver }}"

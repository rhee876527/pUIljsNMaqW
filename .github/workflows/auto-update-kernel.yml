name: Auto update Kernel Version

on:
  push:
    branches:
      - main 
  schedule:
    - cron: '8 15 * * *' #run daily

jobs:
  update-kernel:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read current version from PKGBUILD
        id: read_version
        run: |
          _major=$(grep '^_major=' PKGBUILD | cut -d'=' -f2)
          _minor=$(grep '^_minor=' PKGBUILD | cut -d'=' -f2)
          echo "Current version: $_major.$_minor"
          echo "current_major=$_major" >> $GITHUB_ENV
          echo "current_minor=$_minor" >> $GITHUB_ENV
        
      - name: Get latest kernel version
        id: get_latest_version
        run: |
          latest_version=$(curl -s https://www.kernel.org/finger_banner | grep "The latest stable version" | awk '{print $NF}')
          echo "Latest version: $latest_version"
           # Set latest_major and latest_minor 
          latest_major=$(echo "$latest_version" | cut -d'.' -f1-2)  # Extract major and minor
          latest_minor=$(echo "$latest_version" | cut -d'.' -f3)    # Extract patch
          echo "latest_major=$latest_major" >> $GITHUB_ENV
          echo "latest_minor=$latest_minor" >> $GITHUB_ENV

      - name: Update PKGBUILD if new kernel is available
        id: update_pkgbuild
        run: |        
          latest_minor_int=${latest_minor%%.*}      
          # Compare versions using string comparison
          if [[ "$latest_major" > "$current_major" || 
                ("$latest_major" == "$current_major" && "$latest_minor_int" -gt "$current_minor") ]]; then
              echo "Updating PKGBUILD..."
              sed -i "s/^_major=.*/_major=${latest_major}/" PKGBUILD
              sed -i "s/^_minor=.*/_minor=${latest_minor}/" PKGBUILD
              echo "updated=true" >> $GITHUB_ENV 
          else
              echo "No update needed."
          fi

      - name: Fetch clearlinux tag
        id: get_latest_clear
        run: |
          # Fetch the latest tag
          LATEST_TAG=$(curl -s https://github.com/clearlinux-pkgs/linux/tags | grep -oP 'href="/clearlinux-pkgs/linux/releases/tag/[^"]+"' | head -n 1 | sed 's/href="\/clearlinux-pkgs\/linux\/releases\/tag\///;s/"//g')
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
            
      - name: Update clr tag
        run: |
          CURRENT_CLR=$(echo "$LATEST_TAG" | cut -d '.' -f 1-2)
    
          # Skip update if clr is behind or major doesn't match
          if [ "${{ env.latest_major }}" == "$CURRENT_CLR" ]; then
              echo "Updating _clr to: $LATEST_TAG"
        
              if [[ "$LATEST_TAG" == "$(grep '^_clr=' PKGBUILD | cut -d'=' -f2 | tr -d ' ')" ]]; then
                  echo "Current clr version matches. Skip _clr update."
              else
                  sed -i "s/^_clr=.*/_clr=${LATEST_TAG}/" PKGBUILD && echo "Updated latest clr version!"
                  echo "clr_updated=true" >> $GITHUB_ENV
              fi
          else
              echo "Clr major version not congruent with selected stable version. Not updating!"
          fi

      - name: Rollback pkgrel
        if: env.updated == 'true'
        run: |
          # Read the current pkgrel value
          current_pkgrel=$(grep '^pkgrel=' PKGBUILD | cut -d'=' -f2)
          # Check if pkgrel is anything other than 1
          if [[ "$current_pkgrel" != "1" ]]; then
              # Set pkgrel to 1
              sed -i 's/^pkgrel=.*/pkgrel=1/' PKGBUILD
              echo "Rollback pkgrel for new major"
          fi

      - name: Save new kernel pkgrel artifact
        if: env.updated == 'true'
        run: |
              echo "Save pkgrel for new major version"
              echo "pkgrel_rollback=true" > new-release-update.txt

      - name: Avail pkgrel update artifact
        if: env.updated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: new-kernel
          path: new-release-update.txt


      - name: Update cachyos patch names
        if: env.updated == 'true'
        run: |
          bash ./cachy_patches_assistant.sh ${{ env.latest_major }}

      - name: Commit changes
        if: env.updated == 'true' || env.clr_updated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add PKGBUILD
          git commit -m "Update PKGBUILD to latest kernel version ${{ env.latest_major }}.${{ env.latest_minor }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
